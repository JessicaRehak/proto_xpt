// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh2dcartesian.proto

#include "mesh2dcartesian.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_mesh2dcartesian_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mesh2dcartesian_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mesh2DCartesian_Node;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_mesh2dcartesian_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Mesh2DCartesian_Triangle;
}  // namespace protobuf_mesh2dcartesian_2eproto
class Mesh2DCartesian_NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mesh2DCartesian_Node>
      _instance;
} _Mesh2DCartesian_Node_default_instance_;
class Mesh2DCartesian_TriangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mesh2DCartesian_Triangle>
      _instance;
} _Mesh2DCartesian_Triangle_default_instance_;
class Mesh2DCartesianDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mesh2DCartesian>
      _instance;
} _Mesh2DCartesian_default_instance_;
namespace protobuf_mesh2dcartesian_2eproto {
static void InitDefaultsMesh2DCartesian_Node() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Mesh2DCartesian_Node_default_instance_;
    new (ptr) ::Mesh2DCartesian_Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mesh2DCartesian_Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mesh2DCartesian_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMesh2DCartesian_Node}, {}};

static void InitDefaultsMesh2DCartesian_Triangle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Mesh2DCartesian_Triangle_default_instance_;
    new (ptr) ::Mesh2DCartesian_Triangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mesh2DCartesian_Triangle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Mesh2DCartesian_Triangle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMesh2DCartesian_Triangle}, {}};

static void InitDefaultsMesh2DCartesian() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Mesh2DCartesian_default_instance_;
    new (ptr) ::Mesh2DCartesian();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Mesh2DCartesian::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Mesh2DCartesian =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMesh2DCartesian}, {
      &protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Node.base,
      &protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Triangle.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Mesh2DCartesian_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mesh2DCartesian_Triangle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mesh2DCartesian.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian_Node, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian_Node, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian_Triangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian_Triangle, nodes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, y_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Mesh2DCartesian, triangles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Mesh2DCartesian_Node)},
  { 7, -1, sizeof(::Mesh2DCartesian_Triangle)},
  { 13, -1, sizeof(::Mesh2DCartesian)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Mesh2DCartesian_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Mesh2DCartesian_Triangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Mesh2DCartesian_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "mesh2dcartesian.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025mesh2dcartesian.proto\"\336\001\n\017Mesh2DCartes"
      "ian\022\r\n\005x_min\030\001 \001(\002\022\r\n\005x_max\030\002 \001(\002\022\r\n\005y_m"
      "in\030\003 \001(\002\022\r\n\005y_max\030\004 \001(\002\022$\n\005nodes\030\005 \003(\0132\025"
      ".Mesh2DCartesian.Node\022,\n\ttriangles\030\006 \003(\013"
      "2\031.Mesh2DCartesian.Triangle\032\034\n\004Node\022\t\n\001x"
      "\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\032\035\n\010Triangle\022\021\n\005nodes\030\001"
      " \003(\rB\002\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mesh2dcartesian.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_mesh2dcartesian_2eproto

// ===================================================================

void Mesh2DCartesian_Node::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh2DCartesian_Node::kXFieldNumber;
const int Mesh2DCartesian_Node::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh2DCartesian_Node::Mesh2DCartesian_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh2DCartesian.Node)
}
Mesh2DCartesian_Node::Mesh2DCartesian_Node(const Mesh2DCartesian_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Mesh2DCartesian.Node)
}

void Mesh2DCartesian_Node::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Mesh2DCartesian_Node::~Mesh2DCartesian_Node() {
  // @@protoc_insertion_point(destructor:Mesh2DCartesian.Node)
  SharedDtor();
}

void Mesh2DCartesian_Node::SharedDtor() {
}

void Mesh2DCartesian_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mesh2DCartesian_Node::descriptor() {
  ::protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mesh2DCartesian_Node& Mesh2DCartesian_Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Node.base);
  return *internal_default_instance();
}


void Mesh2DCartesian_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh2DCartesian.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Mesh2DCartesian_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh2DCartesian.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh2DCartesian.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh2DCartesian.Node)
  return false;
#undef DO_
}

void Mesh2DCartesian_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh2DCartesian.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Mesh2DCartesian.Node)
}

::google::protobuf::uint8* Mesh2DCartesian_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh2DCartesian.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mesh2DCartesian.Node)
  return target;
}

size_t Mesh2DCartesian_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh2DCartesian.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh2DCartesian_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh2DCartesian.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh2DCartesian_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh2DCartesian_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh2DCartesian.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh2DCartesian.Node)
    MergeFrom(*source);
  }
}

void Mesh2DCartesian_Node::MergeFrom(const Mesh2DCartesian_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh2DCartesian.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Mesh2DCartesian_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh2DCartesian.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh2DCartesian_Node::CopyFrom(const Mesh2DCartesian_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh2DCartesian.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh2DCartesian_Node::IsInitialized() const {
  return true;
}

void Mesh2DCartesian_Node::Swap(Mesh2DCartesian_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh2DCartesian_Node::InternalSwap(Mesh2DCartesian_Node* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mesh2DCartesian_Node::GetMetadata() const {
  protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mesh2DCartesian_Triangle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh2DCartesian_Triangle::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh2DCartesian_Triangle::Mesh2DCartesian_Triangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Triangle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh2DCartesian.Triangle)
}
Mesh2DCartesian_Triangle::Mesh2DCartesian_Triangle(const Mesh2DCartesian_Triangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Mesh2DCartesian.Triangle)
}

void Mesh2DCartesian_Triangle::SharedCtor() {
}

Mesh2DCartesian_Triangle::~Mesh2DCartesian_Triangle() {
  // @@protoc_insertion_point(destructor:Mesh2DCartesian.Triangle)
  SharedDtor();
}

void Mesh2DCartesian_Triangle::SharedDtor() {
}

void Mesh2DCartesian_Triangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mesh2DCartesian_Triangle::descriptor() {
  ::protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mesh2DCartesian_Triangle& Mesh2DCartesian_Triangle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian_Triangle.base);
  return *internal_default_instance();
}


void Mesh2DCartesian_Triangle::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh2DCartesian.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear();
}

bool Mesh2DCartesian_Triangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh2DCartesian.Triangle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 nodes = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_nodes())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_nodes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh2DCartesian.Triangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh2DCartesian.Triangle)
  return false;
#undef DO_
}

void Mesh2DCartesian_Triangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh2DCartesian.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 nodes = 1 [packed = true];
  if (this->nodes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _nodes_cached_byte_size_));
  }
  for (int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->nodes(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Mesh2DCartesian.Triangle)
}

::google::protobuf::uint8* Mesh2DCartesian_Triangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh2DCartesian.Triangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 nodes = 1 [packed = true];
  if (this->nodes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _nodes_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->nodes_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mesh2DCartesian.Triangle)
  return target;
}

size_t Mesh2DCartesian_Triangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh2DCartesian.Triangle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 nodes = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->nodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _nodes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh2DCartesian_Triangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh2DCartesian.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh2DCartesian_Triangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh2DCartesian_Triangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh2DCartesian.Triangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh2DCartesian.Triangle)
    MergeFrom(*source);
  }
}

void Mesh2DCartesian_Triangle::MergeFrom(const Mesh2DCartesian_Triangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh2DCartesian.Triangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void Mesh2DCartesian_Triangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh2DCartesian.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh2DCartesian_Triangle::CopyFrom(const Mesh2DCartesian_Triangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh2DCartesian.Triangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh2DCartesian_Triangle::IsInitialized() const {
  return true;
}

void Mesh2DCartesian_Triangle::Swap(Mesh2DCartesian_Triangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh2DCartesian_Triangle::InternalSwap(Mesh2DCartesian_Triangle* other) {
  using std::swap;
  nodes_.InternalSwap(&other->nodes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mesh2DCartesian_Triangle::GetMetadata() const {
  protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mesh2DCartesian::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mesh2DCartesian::kXMinFieldNumber;
const int Mesh2DCartesian::kXMaxFieldNumber;
const int Mesh2DCartesian::kYMinFieldNumber;
const int Mesh2DCartesian::kYMaxFieldNumber;
const int Mesh2DCartesian::kNodesFieldNumber;
const int Mesh2DCartesian::kTrianglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mesh2DCartesian::Mesh2DCartesian()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Mesh2DCartesian)
}
Mesh2DCartesian::Mesh2DCartesian(const Mesh2DCartesian& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      nodes_(from.nodes_),
      triangles_(from.triangles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  // @@protoc_insertion_point(copy_constructor:Mesh2DCartesian)
}

void Mesh2DCartesian::SharedCtor() {
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
}

Mesh2DCartesian::~Mesh2DCartesian() {
  // @@protoc_insertion_point(destructor:Mesh2DCartesian)
  SharedDtor();
}

void Mesh2DCartesian::SharedDtor() {
}

void Mesh2DCartesian::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mesh2DCartesian::descriptor() {
  ::protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mesh2DCartesian& Mesh2DCartesian::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_mesh2dcartesian_2eproto::scc_info_Mesh2DCartesian.base);
  return *internal_default_instance();
}


void Mesh2DCartesian::Clear() {
// @@protoc_insertion_point(message_clear_start:Mesh2DCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  triangles_.Clear();
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _internal_metadata_.Clear();
}

bool Mesh2DCartesian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Mesh2DCartesian)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mesh2DCartesian.Node nodes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Mesh2DCartesian.Triangle triangles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_triangles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Mesh2DCartesian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Mesh2DCartesian)
  return false;
#undef DO_
}

void Mesh2DCartesian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Mesh2DCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_min(), output);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_max(), output);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_min(), output);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_max(), output);
  }

  // repeated .Mesh2DCartesian.Node nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .Mesh2DCartesian.Triangle triangles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->triangles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Mesh2DCartesian)
}

::google::protobuf::uint8* Mesh2DCartesian::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Mesh2DCartesian)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_min(), target);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_max(), target);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_min(), target);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_max(), target);
  }

  // repeated .Mesh2DCartesian.Node nodes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .Mesh2DCartesian.Triangle triangles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->triangles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->triangles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Mesh2DCartesian)
  return target;
}

size_t Mesh2DCartesian::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Mesh2DCartesian)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Mesh2DCartesian.Node nodes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .Mesh2DCartesian.Triangle triangles = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->triangles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->triangles(static_cast<int>(i)));
    }
  }

  // float x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 + 4;
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    total_size += 1 + 4;
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    total_size += 1 + 4;
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh2DCartesian::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Mesh2DCartesian)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh2DCartesian* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mesh2DCartesian>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Mesh2DCartesian)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Mesh2DCartesian)
    MergeFrom(*source);
  }
}

void Mesh2DCartesian::MergeFrom(const Mesh2DCartesian& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Mesh2DCartesian)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  triangles_.MergeFrom(from.triangles_);
  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
}

void Mesh2DCartesian::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Mesh2DCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh2DCartesian::CopyFrom(const Mesh2DCartesian& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Mesh2DCartesian)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh2DCartesian::IsInitialized() const {
  return true;
}

void Mesh2DCartesian::Swap(Mesh2DCartesian* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mesh2DCartesian::InternalSwap(Mesh2DCartesian* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&triangles_)->InternalSwap(CastToBase(&other->triangles_));
  swap(x_min_, other->x_min_);
  swap(x_max_, other->x_max_);
  swap(y_min_, other->y_min_);
  swap(y_max_, other->y_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mesh2DCartesian::GetMetadata() const {
  protobuf_mesh2dcartesian_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_mesh2dcartesian_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mesh2DCartesian_Node* Arena::CreateMaybeMessage< ::Mesh2DCartesian_Node >(Arena* arena) {
  return Arena::CreateInternal< ::Mesh2DCartesian_Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mesh2DCartesian_Triangle* Arena::CreateMaybeMessage< ::Mesh2DCartesian_Triangle >(Arena* arena) {
  return Arena::CreateInternal< ::Mesh2DCartesian_Triangle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Mesh2DCartesian* Arena::CreateMaybeMessage< ::Mesh2DCartesian >(Arena* arena) {
  return Arena::CreateInternal< ::Mesh2DCartesian >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
