// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh2dcartesian.proto

#ifndef PROTOBUF_INCLUDED_mesh2dcartesian_2eproto
#define PROTOBUF_INCLUDED_mesh2dcartesian_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mesh2dcartesian_2eproto 

namespace protobuf_mesh2dcartesian_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mesh2dcartesian_2eproto
namespace proto_xpt_protobuf {
class Mesh2DCartesian;
class Mesh2DCartesianDefaultTypeInternal;
extern Mesh2DCartesianDefaultTypeInternal _Mesh2DCartesian_default_instance_;
class Mesh2DCartesian_Node;
class Mesh2DCartesian_NodeDefaultTypeInternal;
extern Mesh2DCartesian_NodeDefaultTypeInternal _Mesh2DCartesian_Node_default_instance_;
class Mesh2DCartesian_Triangle;
class Mesh2DCartesian_TriangleDefaultTypeInternal;
extern Mesh2DCartesian_TriangleDefaultTypeInternal _Mesh2DCartesian_Triangle_default_instance_;
}  // namespace proto_xpt_protobuf
namespace google {
namespace protobuf {
template<> ::proto_xpt_protobuf::Mesh2DCartesian* Arena::CreateMaybeMessage<::proto_xpt_protobuf::Mesh2DCartesian>(Arena*);
template<> ::proto_xpt_protobuf::Mesh2DCartesian_Node* Arena::CreateMaybeMessage<::proto_xpt_protobuf::Mesh2DCartesian_Node>(Arena*);
template<> ::proto_xpt_protobuf::Mesh2DCartesian_Triangle* Arena::CreateMaybeMessage<::proto_xpt_protobuf::Mesh2DCartesian_Triangle>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto_xpt_protobuf {

// ===================================================================

class Mesh2DCartesian_Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_xpt_protobuf.Mesh2DCartesian.Node) */ {
 public:
  Mesh2DCartesian_Node();
  virtual ~Mesh2DCartesian_Node();

  Mesh2DCartesian_Node(const Mesh2DCartesian_Node& from);

  inline Mesh2DCartesian_Node& operator=(const Mesh2DCartesian_Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mesh2DCartesian_Node(Mesh2DCartesian_Node&& from) noexcept
    : Mesh2DCartesian_Node() {
    *this = ::std::move(from);
  }

  inline Mesh2DCartesian_Node& operator=(Mesh2DCartesian_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh2DCartesian_Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh2DCartesian_Node* internal_default_instance() {
    return reinterpret_cast<const Mesh2DCartesian_Node*>(
               &_Mesh2DCartesian_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Mesh2DCartesian_Node* other);
  friend void swap(Mesh2DCartesian_Node& a, Mesh2DCartesian_Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mesh2DCartesian_Node* New() const final {
    return CreateMaybeMessage<Mesh2DCartesian_Node>(NULL);
  }

  Mesh2DCartesian_Node* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mesh2DCartesian_Node>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mesh2DCartesian_Node& from);
  void MergeFrom(const Mesh2DCartesian_Node& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh2DCartesian_Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:proto_xpt_protobuf.Mesh2DCartesian.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mesh2dcartesian_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mesh2DCartesian_Triangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_xpt_protobuf.Mesh2DCartesian.Triangle) */ {
 public:
  Mesh2DCartesian_Triangle();
  virtual ~Mesh2DCartesian_Triangle();

  Mesh2DCartesian_Triangle(const Mesh2DCartesian_Triangle& from);

  inline Mesh2DCartesian_Triangle& operator=(const Mesh2DCartesian_Triangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mesh2DCartesian_Triangle(Mesh2DCartesian_Triangle&& from) noexcept
    : Mesh2DCartesian_Triangle() {
    *this = ::std::move(from);
  }

  inline Mesh2DCartesian_Triangle& operator=(Mesh2DCartesian_Triangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh2DCartesian_Triangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh2DCartesian_Triangle* internal_default_instance() {
    return reinterpret_cast<const Mesh2DCartesian_Triangle*>(
               &_Mesh2DCartesian_Triangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Mesh2DCartesian_Triangle* other);
  friend void swap(Mesh2DCartesian_Triangle& a, Mesh2DCartesian_Triangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mesh2DCartesian_Triangle* New() const final {
    return CreateMaybeMessage<Mesh2DCartesian_Triangle>(NULL);
  }

  Mesh2DCartesian_Triangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mesh2DCartesian_Triangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mesh2DCartesian_Triangle& from);
  void MergeFrom(const Mesh2DCartesian_Triangle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh2DCartesian_Triangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 nodes = 1 [packed = true];
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 1;
  ::google::protobuf::uint32 nodes(int index) const;
  void set_nodes(int index, ::google::protobuf::uint32 value);
  void add_nodes(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nodes() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:proto_xpt_protobuf.Mesh2DCartesian.Triangle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nodes_;
  mutable int _nodes_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mesh2dcartesian_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Mesh2DCartesian : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto_xpt_protobuf.Mesh2DCartesian) */ {
 public:
  Mesh2DCartesian();
  virtual ~Mesh2DCartesian();

  Mesh2DCartesian(const Mesh2DCartesian& from);

  inline Mesh2DCartesian& operator=(const Mesh2DCartesian& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Mesh2DCartesian(Mesh2DCartesian&& from) noexcept
    : Mesh2DCartesian() {
    *this = ::std::move(from);
  }

  inline Mesh2DCartesian& operator=(Mesh2DCartesian&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Mesh2DCartesian& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh2DCartesian* internal_default_instance() {
    return reinterpret_cast<const Mesh2DCartesian*>(
               &_Mesh2DCartesian_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Mesh2DCartesian* other);
  friend void swap(Mesh2DCartesian& a, Mesh2DCartesian& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Mesh2DCartesian* New() const final {
    return CreateMaybeMessage<Mesh2DCartesian>(NULL);
  }

  Mesh2DCartesian* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Mesh2DCartesian>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Mesh2DCartesian& from);
  void MergeFrom(const Mesh2DCartesian& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh2DCartesian* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Mesh2DCartesian_Node Node;
  typedef Mesh2DCartesian_Triangle Triangle;

  // accessors -------------------------------------------------------

  // repeated .proto_xpt_protobuf.Mesh2DCartesian.Node nodes = 5;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 5;
  ::proto_xpt_protobuf::Mesh2DCartesian_Node* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Node >*
      mutable_nodes();
  const ::proto_xpt_protobuf::Mesh2DCartesian_Node& nodes(int index) const;
  ::proto_xpt_protobuf::Mesh2DCartesian_Node* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Node >&
      nodes() const;

  // repeated .proto_xpt_protobuf.Mesh2DCartesian.Triangle triangles = 6;
  int triangles_size() const;
  void clear_triangles();
  static const int kTrianglesFieldNumber = 6;
  ::proto_xpt_protobuf::Mesh2DCartesian_Triangle* mutable_triangles(int index);
  ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Triangle >*
      mutable_triangles();
  const ::proto_xpt_protobuf::Mesh2DCartesian_Triangle& triangles(int index) const;
  ::proto_xpt_protobuf::Mesh2DCartesian_Triangle* add_triangles();
  const ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Triangle >&
      triangles() const;

  // float x_min = 1;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  float x_min() const;
  void set_x_min(float value);

  // float x_max = 2;
  void clear_x_max();
  static const int kXMaxFieldNumber = 2;
  float x_max() const;
  void set_x_max(float value);

  // float y_min = 3;
  void clear_y_min();
  static const int kYMinFieldNumber = 3;
  float y_min() const;
  void set_y_min(float value);

  // float y_max = 4;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  float y_max() const;
  void set_y_max(float value);

  // @@protoc_insertion_point(class_scope:proto_xpt_protobuf.Mesh2DCartesian)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Node > nodes_;
  ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Triangle > triangles_;
  float x_min_;
  float x_max_;
  float y_min_;
  float y_max_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mesh2dcartesian_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Mesh2DCartesian_Node

// float x = 1;
inline void Mesh2DCartesian_Node::clear_x() {
  x_ = 0;
}
inline float Mesh2DCartesian_Node::x() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.Node.x)
  return x_;
}
inline void Mesh2DCartesian_Node::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.Node.x)
}

// float y = 2;
inline void Mesh2DCartesian_Node::clear_y() {
  y_ = 0;
}
inline float Mesh2DCartesian_Node::y() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.Node.y)
  return y_;
}
inline void Mesh2DCartesian_Node::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.Node.y)
}

// -------------------------------------------------------------------

// Mesh2DCartesian_Triangle

// repeated uint32 nodes = 1 [packed = true];
inline int Mesh2DCartesian_Triangle::nodes_size() const {
  return nodes_.size();
}
inline void Mesh2DCartesian_Triangle::clear_nodes() {
  nodes_.Clear();
}
inline ::google::protobuf::uint32 Mesh2DCartesian_Triangle::nodes(int index) const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.Triangle.nodes)
  return nodes_.Get(index);
}
inline void Mesh2DCartesian_Triangle::set_nodes(int index, ::google::protobuf::uint32 value) {
  nodes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.Triangle.nodes)
}
inline void Mesh2DCartesian_Triangle::add_nodes(::google::protobuf::uint32 value) {
  nodes_.Add(value);
  // @@protoc_insertion_point(field_add:proto_xpt_protobuf.Mesh2DCartesian.Triangle.nodes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Mesh2DCartesian_Triangle::nodes() const {
  // @@protoc_insertion_point(field_list:proto_xpt_protobuf.Mesh2DCartesian.Triangle.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Mesh2DCartesian_Triangle::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:proto_xpt_protobuf.Mesh2DCartesian.Triangle.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// Mesh2DCartesian

// float x_min = 1;
inline void Mesh2DCartesian::clear_x_min() {
  x_min_ = 0;
}
inline float Mesh2DCartesian::x_min() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.x_min)
  return x_min_;
}
inline void Mesh2DCartesian::set_x_min(float value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.x_min)
}

// float x_max = 2;
inline void Mesh2DCartesian::clear_x_max() {
  x_max_ = 0;
}
inline float Mesh2DCartesian::x_max() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.x_max)
  return x_max_;
}
inline void Mesh2DCartesian::set_x_max(float value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.x_max)
}

// float y_min = 3;
inline void Mesh2DCartesian::clear_y_min() {
  y_min_ = 0;
}
inline float Mesh2DCartesian::y_min() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.y_min)
  return y_min_;
}
inline void Mesh2DCartesian::set_y_min(float value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.y_min)
}

// float y_max = 4;
inline void Mesh2DCartesian::clear_y_max() {
  y_max_ = 0;
}
inline float Mesh2DCartesian::y_max() const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.y_max)
  return y_max_;
}
inline void Mesh2DCartesian::set_y_max(float value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:proto_xpt_protobuf.Mesh2DCartesian.y_max)
}

// repeated .proto_xpt_protobuf.Mesh2DCartesian.Node nodes = 5;
inline int Mesh2DCartesian::nodes_size() const {
  return nodes_.size();
}
inline void Mesh2DCartesian::clear_nodes() {
  nodes_.Clear();
}
inline ::proto_xpt_protobuf::Mesh2DCartesian_Node* Mesh2DCartesian::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:proto_xpt_protobuf.Mesh2DCartesian.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Node >*
Mesh2DCartesian::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:proto_xpt_protobuf.Mesh2DCartesian.nodes)
  return &nodes_;
}
inline const ::proto_xpt_protobuf::Mesh2DCartesian_Node& Mesh2DCartesian::nodes(int index) const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.nodes)
  return nodes_.Get(index);
}
inline ::proto_xpt_protobuf::Mesh2DCartesian_Node* Mesh2DCartesian::add_nodes() {
  // @@protoc_insertion_point(field_add:proto_xpt_protobuf.Mesh2DCartesian.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Node >&
Mesh2DCartesian::nodes() const {
  // @@protoc_insertion_point(field_list:proto_xpt_protobuf.Mesh2DCartesian.nodes)
  return nodes_;
}

// repeated .proto_xpt_protobuf.Mesh2DCartesian.Triangle triangles = 6;
inline int Mesh2DCartesian::triangles_size() const {
  return triangles_.size();
}
inline void Mesh2DCartesian::clear_triangles() {
  triangles_.Clear();
}
inline ::proto_xpt_protobuf::Mesh2DCartesian_Triangle* Mesh2DCartesian::mutable_triangles(int index) {
  // @@protoc_insertion_point(field_mutable:proto_xpt_protobuf.Mesh2DCartesian.triangles)
  return triangles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Triangle >*
Mesh2DCartesian::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:proto_xpt_protobuf.Mesh2DCartesian.triangles)
  return &triangles_;
}
inline const ::proto_xpt_protobuf::Mesh2DCartesian_Triangle& Mesh2DCartesian::triangles(int index) const {
  // @@protoc_insertion_point(field_get:proto_xpt_protobuf.Mesh2DCartesian.triangles)
  return triangles_.Get(index);
}
inline ::proto_xpt_protobuf::Mesh2DCartesian_Triangle* Mesh2DCartesian::add_triangles() {
  // @@protoc_insertion_point(field_add:proto_xpt_protobuf.Mesh2DCartesian.triangles)
  return triangles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_xpt_protobuf::Mesh2DCartesian_Triangle >&
Mesh2DCartesian::triangles() const {
  // @@protoc_insertion_point(field_list:proto_xpt_protobuf.Mesh2DCartesian.triangles)
  return triangles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_xpt_protobuf

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mesh2dcartesian_2eproto
